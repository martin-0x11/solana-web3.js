{"version":3,"file":"index.esm.js","sources":["../src/util/to-buffer.ts","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../src/agent-manager.ts","../src/epoch-schedule.ts","../src/errors.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n  // const status = (\n  //   await connection.confirmTransaction(\n  //     signature,\n  //     options && options.commitment,\n  //   )\n  // ).value;\n\n  // if (status.err) {\n  //   throw new Error(\n  //     `Transaction ${signature} failed (${JSON.stringify(status)})`,\n  //   );\n  // }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: ReturnType<typeof setTimeout> | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    this._activeRequests++;\n    if (this._destroyTimeout !== null) {\n      clearTimeout(this._destroyTimeout);\n      this._destroyTimeout = null;\n    }\n    return this._agent;\n  }\n\n  requestEnd() {\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      // @ts-ignore\n      callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n        \n      } catch (err) {\n        // @ts-ignore\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        // @ts-ignore\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        // @ts-ignore\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        // @ts-ignore\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","keys","length","Error","map","key","enum","Map","MAX_SEED_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","createProgramAddress","seeds","forEach","TypeError","publicKeyBytes","toArray","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","isOnCurve","pubkey","set","kind","fields","naclLowLevel","nacl","lowlevel","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","str","chars","span","authorized","lockup","ns64","getAlloc","type","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","account","recentBlockhash","instructions","ix","indexToProgramIds","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","u8","seq","slice","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","condition","message","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signature","signatures","add","items","compileMessage","nonceInfo","nonceInstruction","unshift","console","warn","feePayer","accountMetas","accountMeta","includes","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","setSigners","signers","seen","Set","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendAndConfirmTransaction","connection","options","sendOptions","skipPreflight","preflightCommitment","commitment","sendTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","params","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","DESTROY_TIMEOUT_MS","AgentManager","_newAgent","useHttps","keepAlive","maxSockets","https","Agent","http","_useHttps","_agent","requestStart","_activeRequests","_destroyTimeout","clearTimeout","requestEnd","destroy","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","makeWebsocketUrl","endpoint","url","URL","protocol","host","port","String","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","createRpcClient","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","agentManager","fetchWithMiddleware","reject","fetch","clientBrowser","RpcClient","request","callback","agent","method","body","headers","too_many_requests_retries","res","waitTime","status","log","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","Array","isArray","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","commitmentOrConfig","lastFetch","transactionSignatures","simulatedSignatures","wsEndpoint","_commitment","_confirmTransactionInitialTimeout","confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfo","publicKeys","getStakeActivation","getProgramAccounts","configOrCommitment","extra","encoding","filters","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getConfirmedBlock","getBlocks","endSlot","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","block","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","info","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","_pollingBlockhash","timeSinceFetch","_blockhashInfo","expired","_pollNewBlockhash","startTime","simulateTransaction","transactionOrMessage","includeAccounts","_disableBlockhashCaching","encodedTransaction","sigVerify","traceIndent","logTrace","join","sendRawTransaction","rawTransaction","sendEncodedTransaction","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","call","_unsubscribe","unsubscribeId","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_rootSubscriptions","_signatureSubscriptions","_slotSubscriptions","_slotUpdateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_logsSubscriptions","_rpcWebSocketIdleTimeout","close","connect","mentions","notification","onAccountChange","_accountChangeSubscriptionCounter","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","_programAccountChangeSubscriptionCounter","removeProgramAccountChangeListener","onLogs","_logsSubscriptionCounter","removeOnLogsListener","onSlotChange","_slotSubscriptionCounter","removeSlotChangeListener","onSlotUpdate","_slotUpdateSubscriptionCounter","removeSlotUpdateListener","override","_signatureSubscriptionCounter","onSignatureWithOptions","onRootChange","_rootSubscriptionCounter","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","default","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","split","merge","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","update","digest","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","JSON","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","va","rootSlotValid","sendAndConfirmRawTransaction","stringify","devnet","testnet","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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"}